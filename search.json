[{"path":"https://michaelchirico.github.io/potools/articles/custom-diagnostic.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Writing a custom diagnostic","text":"potools provides several “diagnostic” functions used check “health” messaging corpus available given package. check_cracked_messages, looks messages split chunks hard translate; check_untranslated_cat, looks messages displayed via cat() marked translation; check_untranslated_src, looks messages src directory marked translation. just crack surface types diagnostics possible improving quality messaging users – process translation, also bettering experience English! vignette ’ll demonstrate just use case writing custom diagnostic function checks typos messages applying function utils::aspell().","code":""},{"path":"https://michaelchirico.github.io/potools/articles/custom-diagnostic.html","id":"writing-the-diagnostic","dir":"Articles","previous_headings":"","what":"Writing the diagnostic","title":"Writing a custom diagnostic","text":"’ll call function check_spelling; take input data.table like produced get_message_data(), give output data.table indexing issues found. Specifically, three four columns: call, file, line_number, replacement. first three come directly input; last one optional suggests user way repair “unhealthy” messages. package, probably use helper functions clean & simplify body diagnostic; ’re piling everything sequence illustration everything one place.","code":"check_spelling = function(message_data) {   # if aspell isn't installed, this won't work; be sure to return an object with the right schema anyway   if (!nzchar(Sys.which(\"aspell\"))) {     warning(\"'aspell' is not installed; returning nothing\")     return(message_data[0, .(call, file, line_number)])   }    # aspell() works on files, so we'll write the msgid to files   aspell_dir <- file.path(tempdir(), 'aspell')   dir.create(aspell_dir)   original_dir <- setwd(aspell_dir)   on.exit({unlink(aspell_dir, recursive = TRUE); setwd(original_dir)})      # (!is_repeat) makes sure we only check duplicate messages once   # plural messages are in a list, so handle them separately   message_data[(!is_repeat), by = .(file, type), {     if (.BY$type == \"singular\") {       cat(msgid, file = .BY$file, sep = \"\\n\")       # aspell() results has 5 columns: Original, File, Line, Column, Suggestions; we only need 1 & 5       results = utils::aspell(.BY$file)       unlink(.BY$file)              typo_idx <- sapply(results$Original, grep, msgid)       # take the first suggestion       replacement = sapply(         seq_along(results$Suggestions),         function(typo_i) {           # take the identified typo & replace it with aspell's 1st suggestion in the original `call`           gsub(             results$Original[typo_i], results$Suggestions[[typo_i]][1L],             call[typo_idx[typo_i]], fixed = TRUE           )         }       )              .(         call = call[typo_idx],         file = file[typo_idx],         line_number = line_number[typo_idx],         replacement = replacement       )     } else {       # unlist() to write both the n=1 and n!=1 messages to the file side-by-side       all_msgid <- unlist(msgid_plural)       cat(all_msgid, file = .BY$file, sep = \"\\n\")       results = utils::aspell(.BY$file)       unlink(.BY$file)              # odd numbers in grep output --> first entry for each plural_msgid; even numbers --> second entry.       # do this arithmetic trick to re-map that to the original entry number in msgid_plural       typo_idx <- ((sapply(results$Original, grep, all_msgid) - 1L) %/% 2L) + 1L       # potentially overwrite each call >1 time if both messages have a typo       replacement = call       for (typo_i in seq_along(results$Suggestions)) {         replacement[typo_idx[typo_i]] <- gsub(           results$Original[typo_i], results$Suggestions[[typo_i]][1L],           replacement[typo_idx[typo_i]], fixed = TRUE         )       }       typo_idx <- unique(typo_idx)        .(         call = call[typo_idx],         file = file[typo_idx],         line_number = line_number[typo_idx],         replacement = replacement[typo_idx]       )     }   }] }"},{"path":"https://michaelchirico.github.io/potools/articles/custom-diagnostic.html","id":"running-the-diagnostic","dir":"Articles","previous_headings":"","what":"Running the diagnostic","title":"Writing a custom diagnostic","text":"can check diagnostic works simple test package GreatSpelling created vignette. covers basics – look forward seeing great uses creative developers can devise. Thanks reading!","code":"library(potools) great_spelling_messages = get_message_data(\"GreatSpelling\") ## Getting R-level messages... # showing the structure of the messagedata for this package great_spelling_messages ##    message_source     type       file                           msgid ## 1:              R singular    hazel.R These dark arts are forbiddden! ## 2:              R singular spellman.R     This is byond my abilities! ## 3:              R   plural   merlin.R                            <NA> ##                  msgid_plural                                         call ## 1:                                 stop(\"These dark arts are forbiddden!\") ## 2:                                  warning(\"This is byond my abilities!\") ## 3: %d lyfe left,%d lyves left ngettext(n, \"%d lyfe left\", \"%d lyves left\") ##    line_number is_repeat is_marked_for_translation is_templated ## 1:           2     FALSE                      TRUE        FALSE ## 2:           2     FALSE                      TRUE        FALSE ## 3:           2     FALSE                      TRUE        FALSE # running our diagnostic check_spelling(great_spelling_messages) ## Warning in check_spelling(great_spelling_messages): 'aspell' is not installed; ## returning nothing ## Empty data.table (0 rows and 3 cols): call,file,line_number"},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"basic-process","dir":"Articles","previous_headings":"","what":"Basic process","title":"Translation for package developers","text":"get details lets review basic process: run po_extract() extract translatable messages R C code. creates .pot (po template) file contains every translatable message. translator calls po_create() generate .po file language. .po file consists pair lines like: replace msgstr line appropriate translation: Either translator uses po_compile() turn plain text .po files binary .mo files distributed package.","code":"msgid \"This is the message in English\" msgstr \"\" msgid \"This is the message in English\" msgstr \"This is the message in another language\""},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"extraction","dir":"Articles","previous_headings":"","what":"Extraction","title":"Translation for package developers","text":"potools provides two styles extracting messages translation: base explicit, described . ’ve decided style want use, record DESCRIPTION: run po_extract() generate .pot file.","code":"Config/potools/style: explicit"},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"base-style","dir":"Articles","previous_headings":"Extraction","what":"Base style","title":"Translation for package developers","text":"base style captures messages base functions include built-translation capabilities1: message(), warning(), stop(). also captures messages explicit translation functions gettext(), gettextf(), ngettext(). (, however, translate cat()). advantage base style, ’s quick get started . message(), warning() stop() concatenate components …: However, ’ll learn shortly, style unlikely generate messages easily translated, po_extract(style = \"base\") also capture messages messagef(), warningf(), stopf(). equivalents message(), warnings(), stop() use sprintf() style (hence f suffix). functions included base R, want use , ’ll need copy definitions :","code":"message(\"This\", \" is\", \" a\", \" message\") #> This is a message warning(\"This\", \" is\", \" a\", \" warning\") #> Warning: This is a warning stop(\"This\", \" is\", \" an\", \" error\") #> Error in eval(expr, envir, enclos): This is an error messagef <- function(fmt, ..., appendLF = TRUE) {   msg <- gettextf(fmt, ..., domain = \"R-{mypackage}\")   message(msg, domain = NA, appendLF = appendLF) }  warningf <- function(fmt, ..., immediate. = FALSE, noBreaks. = FALSE) {   msg <- gettextf(fmt, ..., domain = \"R-{mypackage}\")   warning(msg,      domain = NA,      call. = FALSE,      immediate. = immediate.,      noBreaks. = noBreaks.   ) }  stopf <- function(fmt, ...) {   msg <- gettextf(fmt, ..., domain = \"R-{mypackage}\")   stop(msg, domain = NA, call. = FALSE) }"},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"explicit-style","dir":"Articles","previous_headings":"Extraction","what":"Explicit style","title":"Translation for package developers","text":"explicit style captures messages explicitly flagged translation gettext(), ngettext(), tr_(). Like messagef() friends, tr_() provided R, ’ll need define : advantage explicit style ’s clear messages ready translated. disadvantage ’s easy miss string, future ’ll provide automated ways identify strings haven’t translated probably . ’ll use explicit style rest vignette makes clear translated.","code":"tr_ <- function(...) {   enc2utf8(gettext(paste0(...), domain = \"R-{mypackage}\")) }"},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"writing-good-messages","dir":"Articles","previous_headings":"","what":"Writing good messages","title":"Translation for package developers","text":"mechanics translating package quite straightforward. bigger challenge writing messages easy translate. part, extension writing messages easy understand English well! ’s hard native English speaker understand message, ’s going even harder ’s translated another language. following sections give advice write good messages, inspired “Preparing translatable strings” section gettext2 manual.","code":""},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"write-full-sentences","dir":"Articles","previous_headings":"Writing good messages","what":"Write full sentences","title":"Translation for package developers","text":"Generally, strive make sure message comes single string (.e. lives within single \"“). Take simple greeting translate”good\" “morning” individually: pose two challenges translators: working .po files, translators see individual string without context, may different order original source. can lead either poor translation expensive journey source code get context. Prose like code: can’t reliably build sentences small fragments text. Even can figure English, ’s unlikely form work languages. Instead ’s better generate complete message single string using glue() sprintf() 3 interpolate parts vary: translator sees something like : gives translator enough context create good translation freedom change word order make grammatically correct sentence language. can make problem challenging making greeting flexible: generate following sequence translations French: Unfortunately breakdown won’t generate correct French. three greetings “Bonjour” morning afternoon, “Bonsoir” evening. two problems: good morning good afternoon use bonjour (even though French different words morning afternoon; bon après-midi used farewell), two word English phrases turn single French words. translating Mongolian ’d face different problem. Mongolian uses times day, arranges words opposite order English: “Өглөөний мэнд” morning greetings, “Өдрийн мэнд” afternoon greetings, “Оройн мэнд” evening greetings. , need resolve problem moving away translating fragments towards translating complete sentences. One way restrict fixed set time points use switch() specify greeting: works French (Mongolian): However, ’s still fully general solution assumes time day important characteristic greeting, day broken three components. Neither true general: Danish breaks time day two six parts: (“morgen”), pre-noon (“formiddag”), noon (“middag”), afternoon (“eftermiddag”), evening (“aften”), night (“nat”). Swahili, greeting varies based relationship people: “Shikamoo” young old, “Hujambo” old young, “Mambo” young young. Greetings particularly challenging translate great cultural variation; fortunately messages R packages won’t require nuance.","code":"name <- \"Hadley\" paste0(tr_(\"Good\"), \" \", tr_(\"morning\"), \" \", name, \"!\") #> [1] \"Good morning Hadley!\" msgid \"morning\" msgstr \"\"  msgid \"Good\" msgstr \"\" glue(tr_(\"Good morning {name}\")) #> Good morning Hadley sprintf(tr_(\"Good morning %s\"), name) #> [1] \"Good morning Hadley\" msgid \"Good morning {name}!\" msgstr \"\" greet <- function(name, time_of_day) {   paste0(tr_(\"Good\"), \" \", time_of_day, \" \", name, \"!\") } greet(\"Hadley\", tr_(\"morning\")) #> [1] \"Good morning Hadley!\" greet(\"Hadley\", tr_(\"afternoon\")) #> [1] \"Good afternoon Hadley!\" greet(\"Hadley\", tr_(\"evening\")) #> [1] \"Good evening Hadley!\" msgid \"Good\" msgstr \"Bon\"  msgid \"morning\" msgstr \"matin\"  msgid \"afternoon\" msgstr \"après midi\"  msgid \"evening\" msgstr \"soirée\" greet <- function(name, time_of_day) {   switch(time_of_day,     morning = glue(tr_(\"Good morning {name}!\")),     afternoon = glue(tr_(\"Good afternoon {name}!\")),     evening = glue(tr_(\"Good evening {name}!\"))   ) } msgstr: \"Good morning {name}!\" msgid: \"Bonjour {name}!\"  msgstr: \"Good afternoon {name}!\" msgid: \"Bonjour {name}!\"  msgstr: \"Good evening {name}!\" msgid: \"Bonsoir {name}!\""},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"sprintf-vs-glue","dir":"Articles","previous_headings":"Writing good messages","what":"sprintf() vs glue()","title":"Translation for package developers","text":"R, two common ways interpolate variables string: sprintf() glue(). pros cons : Using glue() requires additional, lightweight, dependency, gives translator context (assuming use informative names local variables), makes easy rearrange interpolated components: hand, putting name variable translated string means can’t change without updating translations, ’s small risk also getting translated. sprintf() built base R, always available. downside can hard figure sentinels refer syntax rearranging components (uses 1$, 2$) somewhat arcane. difference may important realize – mentioned , languages (e.g., Turkish, Korean, Japanese) assemble phrases sentences different order. “7 apples” becomes “7りんごをもっています” Japanese, .e. “7 apples [’m] holding” – verb & subject switched places. reordering templates messages going quite common want messages available limited set languages.","code":"msgid \"{first} {second} {third}\" msgstr \"{third} {first} {second}\" msgid \"%s %s %s\" msgstr \"%3$s %1$s %2$s\""},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"un-translatable-content","dir":"Articles","previous_headings":"Writing good messages","what":"Un-translatable content","title":"Translation for package developers","text":"can use interpolation avoid including un-translatable components like URLs email addresses message. good practice saves work translators, makes easier see changes text, avoids chance translator accidentally introducing typo. works something like : Similarly, ’re generating strings include HTML, avoid including HTML translated string, instead translate just words: Generally, want help translator spend much time possible helping .","code":"# Instead of this: tr_(\"See <https://r-project.org> to learn more\")  # Try this: url <- \"https://r-project.org\" glue(tr_(\"See <{url}> to learn more\")) # Instead of this: tr_(\"<a href='/index.html'>Home page<\/a>\")  # Try this: paste0(\"<a href='/index.html'>\", tr_(\"Home page\"), \"<\/a>\")"},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"googling","dir":"Articles","previous_headings":"","what":"Googling","title":"Translation for package developers","text":"’s worth noting non-English messages often harder Google non-English languages significant presence StackOverflow. suggestions: can give error messages unique identifier (e.g. numbering). may harder “established” packages since adding identifiers might breaking change. also headache keep track numbers taken, e.g. context concurrent PRs incrementing error numbering parallel. End users can switch English locale mid-session running Sys.setenv(LANGUAGE = 'en'): error messages produced English set LANGUAGE . write custom error wrapper produces error English translation.","code":""},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"plurals","dir":"Articles","previous_headings":"Googling","what":"Plurals","title":"Translation for package developers","text":"English, nouns different forms one item (singular) one item (plural, also used zero items). , formally, English grammatical count two forms: singular plural. might tempted construct sentence like : doesn’t always work, even English: , always want construct complete sentence: ’s additional wrinkle : English singular plural, languages different forms like singular (1), dual (2), plural (3 ), singular (1), paucal (), plural (many). need use different helper: ngettext(n, singular, plural): ngettext() generates special form .po file, shows singular plural forms: translator can supply number translations. Languages don’t plurals (e.g. Chinese) need supply single translation: Russian three forms, gets three entries (roughly 1, 2-4, everything else): Slovenian Serbian four forms, Irish five forms (learn bitesize Irish), Arabic six forms. rules define number get message quite complex encoded “plural form” ’s recorded top .po file looks something like (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20)? 1 : 2). However, something translators need worry , speakers language find easier puzzle rules.","code":"cows <- function(n) {   if (n == 1) {     paste0(n, \" cow\")    } else {      paste0(n, \" cows\")   } } paste(\"I have \", cows(0)) #> [1] \"I have  0 cows\" paste(\"I have \", cows(1)) #> [1] \"I have  1 cow\" paste(\"I have \", cows(2)) #> [1] \"I have  2 cows\" paste0(\"There are \", cows(0), \" in the field\") #> [1] \"There are 0 cows in the field\" paste0(\"There are \", cows(1), \" in the field\") #> [1] \"There are 1 cow in the field\" field_cows <- function(n) {   if (n == 1) {     fmt <- tr_(\"There is {n} cow in the field\")   } else {     fmt <- tr_(\"There are {n} cows in the field\")   }   glue(fmt) } field_cows <- function(n) {   glue(ngettxt(n,     \"There is {n} cow in the field\",     \"There are {n} cows in the field\"   )) } msgid \"There is {n} cow in the field\" msgid_plural \"There are {n} cows in the field\" msgid \"There is {n} cow in the field\" msgid_plural \"There are {n} cows in the field\" msgstr[0] \"田裡有{n}頭牛\" msgid \"There is {n} cow in the field\" msgid_plural \"There are {n} cows in the field\" msgstr[0] \"В поле {xn} корова\" msgstr[1] \"В поле {n} коровы\" msgstr[2] \"В поле {n} коров\""},{"path":"https://michaelchirico.github.io/potools/articles/developers.html","id":"collapsed-lists","dir":"Articles","previous_headings":"Googling","what":"Collapsed lists","title":"Translation for package developers","text":"English typically lists items like “, b, c”, use serial, Oxford, comma hotly debated style preference. European languages follow mostly form, although none use Oxford comma, obviously translate “”4. package takes care details: also works glue:","code":"library(and) values <- c(\"first\", \"middle\", \"last\") or(values) #> [1] \"first, middle, and last\"  # lang is normally retrieve automatically from the environemtn # overriding it here to show what a translation looks like: or(values, lang = \"fr\") #> [1] \"first, middle ou last\" glue(tr_(\"`x` must be one of {and(values)}\")) #> `x` must be one of first, middle and last"},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"basic-process","dir":"Articles","previous_headings":"","what":"Basic process","title":"Translation for package translators","text":"get details let’s review basic process creating translations: package developer runs po_extract() extract translatable messages R C code. call po_create() generate .po file language ’re translating. .po file consists metadata header pairs lines like: replace msgstr appropriate translation: Finally, either package developer uses po_compile() turn plain text .po files binary .mo files distributed package. process updating translations slightly different, ’ll come back later doc.","code":"msgid \"This is the message in English\" msgstr \"\" msgid \"This is the message in English\" msgstr \"This is the message in another language\""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"translation-basics","dir":"Articles","previous_headings":"","what":"Translation basics","title":"Translation for package translators","text":"translator, ’ll work primarily .po files. ’s one (two) .po file(s) language lives po/ directory. directory, ’ll also see .pot file — ’s template file contains list translatable strings package used generate .po files language. Get started creating .po language running potools::po_create(\"{language code}\"). Next, open file favourite text editor. top file ’ll see metadata looks something like : Begin updating Last-Translator email address; tells developer reach (e.g. ask might update translations new version package comes ). rest file consist pairs msgid msgstr initially look like : msgid string appears R source code; error, warning, message, just printed console. msgstr translated equivalent ’s job translator fill msgstr equivalent language: ’s basically ! Just work file filling translations one one. ’s quite enough context figure best translation can either look source code (using file number & line reference line msgid) contact developer clarification. (message challenging translate, often indicates English version might suboptimal, developers appreciate reaching ). Next ’ll go details message variations might come across, show try work, finish discussing extra details arise updating translations package, rather starting scratch.","code":"msgid \"\" msgstr \"\" \"Project-Id-Version: potools 0.2.3\\n\" \"Report-Msgid-Bugs-To: \\n\" \"POT-Creation-Date: 2021-11-06 14:19-0700\\n\" \"PO-Revision-Date: 2021-11-06 14:19-0700\\n\" \"Last-Translator: Michael Chirico <michaelchirico4@gmail.com>\\n\" \"Language-Team: ja\\n\" \"Language: ja\\n\" \"MIME-Version: 1.0\\n\" \"Content-Type: text/plain; charset=UTF-8\\n\" \"Content-Transfer-Encoding: 8bit\\n\" \"X-Generator: potools 0.2.3\\n\" #: translate_package.R:66 msgid \"Running message diagnostics...\" msgstr \"\" #: translate_package.R:66 msgid \"Running message diagnostics...\" msgstr \"メッセージ診断中。。。\""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"picking-a-domain-for-diasporic-languages","dir":"Articles","previous_headings":"Translation basics","what":"Picking a domain for diasporic languages","title":"Translation for package translators","text":"domain use translating Spanish? ’s es_AR, es_BO, es_CL, es_DO, es_HN, … really need provide separate translation Nicaraguan (es_NI) users? , . Typically, best creating one set translations language’s general domain (, es). translations exist es, users specific locales see messages es whenever exist. really want provide regionally-specific error messages (awesome!), can either (1) create whole new set translations region (2) write translations region-specific messages. latter R handles messages differ British/American spelling, example. Say user running es_GT triggers error. R first look translation es_GT; none defined, look translation es. none defined , finally fall back package’s default language (.e., whatever language written source code, usually English). Note also advice given R Installation Administration manual (also cited ) – writing Spanish translations, typical package use language = \"es\" generate Spanish translations Spanish domains. want add regional flair messaging, can supplemental .po files. example, can add Argentinian messages es_AR; users running R es_AR locale see messages specifically written es_AR first; absent , es message shown; absent , default message (.e., language written source code, usually English). Chinese slightly different case – typically, zh_CN domain used write simplified characters zh_TW used traditional characters. principal leverage zh_TW Taiwanisms zh_HK Hongkieisms.","code":""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"message-variations","dir":"Articles","previous_headings":"","what":"Message variations","title":"Translation for package translators","text":"following sections describe four important message variations: Messages use glue() Messages use sprintf() Multi-line messages Plurals","code":""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"glue","dir":"Articles","previous_headings":"Message variations","what":"glue()","title":"Translation for package translators","text":"can tell message uses glue contain pairs braces: {}1. glue evaluates R code {} inserts results string: code generate following .po file: main thing remember translating glue strings translate contents {} since name variable code:","code":"name <- \"Michael\" glue::glue(\"Hi {name}!\") #> Hi Michael! msgid: \"Hi {name}!\" msgstr: \"\" msgid: \"Hi {name}!\" msgstr: \"こんにちは {name}！\""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"sprintf","dir":"Articles","previous_headings":"Message variations","what":"sprintf()","title":"Translation for package translators","text":"can tell message uses sprintf() contain format specifier like %s (string), %(integer), %f (floating point number). called, sprintf() replaces placeholders values: generate following .po: (spoke Japanese), might translate : multiple interpolated strings, need change order make grammatical sense language, can put 1$, 2$ etc. % refer variable position. can hard puzzle confusing read, recommend package developers use glue().","code":"name <- \"Michael\" sprintf(\"Hi %s!\", name) #> [1] \"Hi Michael!\" msgid: \"Hi %s!\" msgstr: \"\" msgid: \"Hi %s!\" msgstr: \"こんにちは %s！\" sprintf(\"%s %s %s\", \"first\", \"second\", \"third\") #> [1] \"first second third\" sprintf(\"%2$s %1$s %3$s\", \"first\", \"second\", \"third\") #> [1] \"second first third\""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"multi-line-messages","dir":"Articles","previous_headings":"Message variations","what":"Multi-line messages","title":"Translation for package translators","text":"message long, might get wrapped across multiple lines: don’t need worry preserving line breaks, since translated version might shorter longer English version. Just note line must start end \" doesn’t fit one line, first msgstr \"\".","code":"msgid \"\" \"Reproducing these messages here for your reference since they might still \" \"provide some utility.\" msgstr \"\""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"plurals","dir":"Articles","previous_headings":"Message variations","what":"Plurals","title":"Translation for package translators","text":"Messages vary based count slightly different form. begin English singular plural forms: followed forms language. Depending language, need provide somewhere 1 6 translations. example, Japanese needs single form, rest sentence doesn’t vary based number cows: Slovenian four forms (1, 2, 3-4, everything else) gets four entries: (Note forms zero-indexed, start 0, 1.) rules converting number msgid index expressed using C-code can found top .po file (look “plural-forms”). ’s little tricky go C code human description cases, ’re native speaker ’re hopefully already familiar basic breakdown.","code":"msgid \"There is {n} cow in the field\" msgid_plural \"There are {n} cows in the field\" msgid \"There is {n} cow in the field\" msgid_plural \"There are {n} cows in the field\" msgstr[0]: 牧草地に{n}頭牛がいます msgid \"There is {n} cow in the field\" msgid_plural \"There are {n} cows in the field\" msgstr[0]: Na polju je {n} krava msgstr[1]: Na polju sta {n} kravi msgstr[2]: Na polju so {n} krave msgstr[3]: Na polju je {n} krav"},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"other-issues","dir":"Articles","previous_headings":"","what":"Other issues","title":"Translation for package translators","text":"Technical terms par course R packages; showing users similar terms concept might lead needless confusion. R recommends using ISI Multilingual Glossary Statistical Terms help overcome issue.","code":""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"trying-out-your-work","dir":"Articles","previous_headings":"","what":"Trying out your work","title":"Translation for package translators","text":"know use package, can try translations. three important steps: Set LANGUAGE environment variable language ’re translating: Sys.setenv(LANGUAGE = \"{language code}\"). (need per session). Compile plain text .po file ’ve editing binary .mo file R uses running potools::po_compile(). Re-load (devtools::load_all()) re-install package (e.g. using RStudio’s “Install restart” button). can work package usually messages ’ve translated appear language.","code":""},{"path":"https://michaelchirico.github.io/potools/articles/translators.html","id":"updating-a-package","dir":"Articles","previous_headings":"","what":"Updating a package","title":"Translation for package translators","text":"far ’ve assumed ’re providing first set translations package. another common scenario updating translations new release package. get point, developer updated .pot file .po files. three cases: message added: msgstr empty, ’ll need fill like initial translation. message removed: old translations moved bottom file (can still refer ’re needed), marked deprecated (using ??? symbol). message changed: ’s big change, ’ll treated like addition deletion, ’s small change might get marked fuzzy. TODO: show old message shows . ’ll need double check translation remove “fuzzy” ’re done.","code":"#: build-news.R:285 #, fuzzy msgid \"CRAN release: %s\" msgstr \"Versión en CRAN %s\""},{"path":"https://michaelchirico.github.io/potools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Chirico. Maintainer, author. Hadley Wickham. Author.","code":""},{"path":"https://michaelchirico.github.io/potools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chirico M, Wickham H (2022). potools: Tools Internationalization Portability R Packages. https://github.com/MichaelChirico/potools, https://michaelchirico.github.io/potools.","code":"@Manual{,   title = {potools: Tools for Internationalization and Portability in R Packages},   author = {Michael Chirico and Hadley Wickham},   year = {2022},   note = {https://github.com/MichaelChirico/potools, https://michaelchirico.github.io/potools}, }"},{"path":[]},{"path":"https://michaelchirico.github.io/potools/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Internationalization and Portability in R Packages","text":"R users global community. Xiamen Santiago, Addis Ababa Tbilisi, Ogallala Adelaide, R users legion speak many different languages. serve diverse communities, R includes built-tools based GNU gettext system make possible translate user-facing communications like messages, warnings, errors. Unfortunately, system uses new file types (.pot templates, .po files, .mo binaries) come quirks idiosyncrasies. goal potools make easy possible translate package abstracting away many details gettext system possible. potool logo features potoo designed Allison Horst.","code":""},{"path":"https://michaelchirico.github.io/potools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Internationalization and Portability in R Packages","text":"Start installing released version potools CRAN: development version GitHub: ’ll also need install gettext, GNU command line toolkit powers potools. Installation depends operating system: Windows, gettext bundled Rtools, ’re developing packages probably already . Mac, ’s easiest install brew: brew install gettext Linux, ’s usually already installed; otherwise ’ll need install gettext distro’s standard tool.","code":"install.packages(\"potools\") # install.packages(\"remotes\") remotes::install_github(\"MichaelChirico/potools\")"},{"path":"https://michaelchirico.github.io/potools/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Tools for Internationalization and Portability in R Packages","text":"two core workflows provided potools: translate_package() one-stop-shop interactively setting package providing translations, described ?translate_package. po_extract(), po_create(), po_update(), po_compile() let perform individual steps translate_package() described vignette(\"developers\") vignette(\"translators\").","code":""},{"path":"https://michaelchirico.github.io/potools/index.html","id":"alternative-software","dir":"","previous_headings":"","what":"Alternative software","title":"Tools for Internationalization and Portability in R Packages","text":"potools means first tool facilitating internationalization; open-source projects deeper experience domain result relatively mature options working gettext/po ecosystem general. smattering tools ’ve come across: Poedit - https://poedit.net/ - GUI Software writing translations Gtranslator - https://wiki.gnome.org/Apps/Gtranslator - GNOME Translation editor Lokalize - https://userbase.kde.org/Lokalize - KDE’s Computer-Aided Translation system Virtaal - https://virtaal.translatehouse.org/?id=virtaal/index - Another FOSS software translation Pootle - https://pootle.translatehouse.org/ - Apparently related Virtaal, apparently ’s even paper written comparing two Localization Toolkit - https://toolkit.translatehouse.org/ - ’m sure difference vs. Virtaal & Pootle PO mode Emacs - https://www.emacswiki.org/emacs/PoMode","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_cracked_messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for cracked messages more suitable for templating — check_cracked_messages","title":"Check for cracked messages more suitable for templating — check_cracked_messages","text":"Diagnose R messages package discover presence \"cracked\" messages better served translation templating. See Details.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_cracked_messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for cracked messages more suitable for templating — check_cracked_messages","text":"","code":"check_cracked_messages(message_data)"},{"path":"https://michaelchirico.github.io/potools/reference/check_cracked_messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for cracked messages more suitable for templating — check_cracked_messages","text":"message_data data.table, object convertible one.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_cracked_messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for cracked messages more suitable for templating — check_cracked_messages","text":"data.table columns call, file, line_number, replacement summarizing results.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_cracked_messages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for cracked messages more suitable for templating — check_cracked_messages","text":"Error messages built like stop(\"gave \", n, \" arguments, \", m, \" needed.\") general hard translators -- correct translation may totally different order (e.g., often case Japanese). preferable instead use base::gettextf() build templated message like stop(gettextf(\"gave %d arguments %d needed.\", n, m)). Translators free rearrange template put numeric pattern fits naturally target language.","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/check_cracked_messages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for cracked messages more suitable for templating — check_cracked_messages","text":"Michael Chirico","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_cracked_messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for cracked messages more suitable for templating — check_cracked_messages","text":"","code":"pkg <- file.path(system.file(package = 'potools'), 'pkg') # copy to a temporary location to be able to read/write/update below tmp_pkg <- file.path(tempdir(), \"pkg\") dir.create(tmp_pkg) file.copy(pkg, dirname(tmp_pkg), recursive = TRUE) #> [1] TRUE  # first, extract message data message_data = get_message_data(tmp_pkg) #> Getting R-level messages... #> Getting src-level messages...  # now, diagnose the messages for any \"cracked\" ones check_cracked_messages(message_data) #>                                                                                                                           call #> 1: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #>     file line_number #> 1: add.R           7 #>                                                                                                                                         replacement #> 1: stop(domain=NA, gettextf(\"add() only works on all-integer input, but found other types: %s\", toString(unique(setdiff(input_types, \"integer\")))))  # cleanup unlink(tmp_pkg, recursive = TRUE) rm(pkg, tmp_pkg, message_data)"},{"path":"https://michaelchirico.github.io/potools/reference/check_potools_sys_reqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the proper system utilities for running package translation are\ninstalled — check_potools_sys_reqs","title":"Check if the proper system utilities for running package translation are\ninstalled — check_potools_sys_reqs","text":"potools uses gettext command line tools R run translation. required translation work properly; function mainly testing use & checks whether current environment equipped translation.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_potools_sys_reqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the proper system utilities for running package translation are\ninstalled — check_potools_sys_reqs","text":"","code":"check_potools_sys_reqs(which = SYSTEM_REQUIREMENTS)"},{"path":"https://michaelchirico.github.io/potools/reference/check_potools_sys_reqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the proper system utilities for running package translation are\ninstalled — check_potools_sys_reqs","text":"requirements test . Defaults command-line utilities potools relies, namely, msgmerge msgfmt msginit msgconv","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_potools_sys_reqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the proper system utilities for running package translation are\ninstalled — check_potools_sys_reqs","text":"TRUE system ready translation, otherwise message suggesting proceed.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_potools_sys_reqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if the proper system utilities for running package translation are\ninstalled — check_potools_sys_reqs","text":"Specifically, potools relies command-line utilities:","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/check_potools_sys_reqs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if the proper system utilities for running package translation are\ninstalled — check_potools_sys_reqs","text":"Michael Chirico","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for untranslated messages emitted by cat — check_untranslated_cat","title":"Check for untranslated messages emitted by cat — check_untranslated_cat","text":"Diagnose R messages package discover presence messages emitted cat() translated (.e., passed gettext(), gettextf(), ngettext()).","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for untranslated messages emitted by cat — check_untranslated_cat","text":"","code":"check_untranslated_cat(message_data)"},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for untranslated messages emitted by cat — check_untranslated_cat","text":"message_data data.table, object convertible one.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for untranslated messages emitted by cat — check_untranslated_cat","text":"data.table columns call, file, line_number, replacement summarizing results.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_cat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for untranslated messages emitted by cat — check_untranslated_cat","text":"function cat commonly used emit messages users (e.g., verbose mode), equipped translation. Instead, messages must first translated emitted. character literals found package's R code used cat translated flagged function. flagged calls, potential replacement offered, built using gettext gettextf (depending whether one ... arguments supplied cat). gettextf case, suggested template always %s (string) since works inputs; author tighten appropriate sprintf() template marker appropriate, example author knows input integer, use %d %instead %s. NB: cat calls included -- particular, cat call specifying non-default file flagged, supplied sep character literal (e.g., sep=x instead sep=\"\")","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_cat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for untranslated messages emitted by cat — check_untranslated_cat","text":"Michael Chirico","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for untranslated messages emitted by cat — check_untranslated_cat","text":"","code":"pkg <- file.path(system.file(package = 'potools'), 'pkg') # copy to a temporary location to be able to read/write/update below tmp_pkg <- file.path(tempdir(), \"pkg\") dir.create(tmp_pkg) file.copy(pkg, dirname(tmp_pkg), recursive = TRUE) #> [1] TRUE  # first, extract message data message_data = get_message_data(tmp_pkg) #> Getting R-level messages... #> Getting src-level messages...  # now, diagnose the messages for any untranslated strings shown through cat() check_untranslated_cat(message_data) #>                                                              call     file #> 1: cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") onLoad.R #>    line_number #> 1:           2 #>                                                                 replacement #> 1: cat(gettextf(\"Launching %s / %s \\\\n\", format(libname), format(pkgname)))  # cleanup unlink(tmp_pkg, recursive = TRUE) rm(pkg, tmp_pkg, message_data)"},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for cracked messages in C/C++ sources — check_untranslated_src","title":"Check for cracked messages in C/C++ sources — check_untranslated_src","text":"Diagnose C/C++ messages package discover untranslated messages","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for cracked messages in C/C++ sources — check_untranslated_src","text":"","code":"check_untranslated_src(message_data)"},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for cracked messages in C/C++ sources — check_untranslated_src","text":"message_data data.table, object convertible one.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for cracked messages in C/C++ sources — check_untranslated_src","text":"data.table columns call, file, line_number, replacement summarizing results. replacement NA time, .e., replacement provided.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_src.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for cracked messages in C/C++ sources — check_untranslated_src","text":"diagnostic looks literal char arrays passed messaging functions (identified translate_package()) marked translation (tagging translation _ N_ macros). strings translated marked.","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_src.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for cracked messages in C/C++ sources — check_untranslated_src","text":"Michael Chirico","code":""},{"path":"https://michaelchirico.github.io/potools/reference/check_untranslated_src.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for cracked messages in C/C++ sources — check_untranslated_src","text":"","code":"pkg <- file.path(system.file(package = 'potools'), 'pkg') # copy to a temporary location to be able to read/write/update below tmp_pkg <- file.path(tempdir(), \"pkg\") dir.create(tmp_pkg) file.copy(pkg, dirname(tmp_pkg), recursive = TRUE) #> [1] TRUE  # first, extract message data message_data = get_message_data(   tmp_pkg,   custom_translation_functions = list(src = \"ReverseTemplateMessage:2\") ) #> Getting R-level messages... #> Getting src-level messages...  # now, diagnose the messages for any untranslated messages in C/C++ check_untranslated_src(message_data) #>                                                                   call #> 1: ReverseTemplateMessage(n, \"Reversing a vector with %d elements\\\\n\") #>             file line_number replacement #> 1: reverse_int.c          19        <NA>  # cleanup unlink(tmp_pkg, recursive = TRUE) rm(pkg, tmp_pkg, message_data)"},{"path":"https://michaelchirico.github.io/potools/reference/get_message_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract user-visible messages from a package — get_message_data","title":"Extract user-visible messages from a package — get_message_data","text":"function looks R src directories package user-visible messages compiles data.table::data.table() facilitate analyzing corpus .","code":""},{"path":"https://michaelchirico.github.io/potools/reference/get_message_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract user-visible messages from a package — get_message_data","text":"","code":"get_message_data(   dir = \".\",   custom_translation_functions = list(R = NULL, src = NULL),   style = NULL,   verbose = !is_testing() )"},{"path":"https://michaelchirico.github.io/potools/reference/get_message_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract user-visible messages from a package — get_message_data","text":"dir Character, default present directory; directory R package stored. custom_translation_functions list either/two components, R src, together governing extract non-standard strings package. See Details translate_package(). style Translation style, either \"base\" \"explict\". default, NULL, reads DESCRIPTION field Config/potools/style can specify style package. styles extract strings explicitly flagged translation gettext() ngettext(). base style additionally extracts strings calls stop(), warning(), message(), stopf(), warningf(), messagef() added helpers package. explicit style also accepts tr_() short hand gettext(). See vignette(\"developer\") details. verbose Logical, default TRUE (except testing). extra information progress, etc. reported?","code":""},{"path":"https://michaelchirico.github.io/potools/reference/get_message_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract user-visible messages from a package — get_message_data","text":"data.table following schema: message_source: character, either \"R\" \"src\", saying whether string found R src folder package type: character, either \"singular\" \"plural\"; \"plural\" means string came ngettext() can pluralized file: character, file string found msgid: character, string (character literal char array found source); missing type == \"plural\" strings msgid_plural: list(character, character), strings (character literals char arrays found source); first applies English n=1 (see ngettext), second applies n!=1; missing type == \"singular\" strings call: character, full call containing string found line_number: integer, line file string found is_repeat: logical, whether msgid duplicate within message_source is_marked_for_translation:logical, whether string marked translation (e.g., R, character literals supplied ... argument stop() marked) is_templated, logical, whether string templatable (e.g., uses %s formatting markers)","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/get_message_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract user-visible messages from a package — get_message_data","text":"Michael Chirico","code":""},{"path":"https://michaelchirico.github.io/potools/reference/get_message_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract user-visible messages from a package — get_message_data","text":"","code":"pkg <- system.file('pkg', package = 'potools') get_message_data(pkg) #> Getting R-level messages... #> Getting src-level messages... #>    message_source     type          file #> 1:              R singular         add.R #> 2:              R singular         add.R #> 3:              R singular      onLoad.R #> 4:              R singular      onLoad.R #> 5:              R singular      onLoad.R #> 6:            src singular reverse_int.c #>                                                            msgid msgid_plural #> 1: add() only works on all-integer input, but found other types:              #> 2:                                                       integer              #> 3:                                                     Launching              #> 4:                                                             /              #> 5:                                                                            #> 6:        reverse_int() only works on integer input, received %s              #>                                                                                                                           call #> 1: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 2: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 3:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 4:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 5:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 6:                                                                 _(\"reverse_int() only works on integer input, received %s\") #>    line_number is_repeat is_marked_for_translation is_templated #> 1:           7     FALSE                      TRUE        FALSE #> 2:           8     FALSE                      TRUE        FALSE #> 3:           2     FALSE                     FALSE        FALSE #> 4:           2     FALSE                     FALSE        FALSE #> 5:           2     FALSE                     FALSE        FALSE #> 6:           9     FALSE                      TRUE         TRUE  # includes strings provided to the custom R wrapper function catf() get_message_data(pkg, custom_translation_functions = list(R = \"catf:fmt|1\")) #> Getting R-level messages... #> Getting src-level messages... #>    message_source     type          file #> 1:              R singular         add.R #> 2:              R singular         add.R #> 3:              R singular         add.R #> 4:              R singular      onLoad.R #> 5:              R singular      onLoad.R #> 6:              R singular      onLoad.R #> 7:            src singular reverse_int.c #>                                                            msgid msgid_plural #> 1: add() only works on all-integer input, but found other types:              #> 2:                                                       integer              #> 3:                                      Adding %d integer inputs              #> 4:                                                     Launching              #> 5:                                                             /              #> 6:                                                                            #> 7:        reverse_int() only works on integer input, received %s              #>                                                                                                                           call #> 1: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 2: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 3:                                                                           catf(\"Adding %d integer inputs\\\\n\", length(dots)) #> 4:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 5:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 6:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 7:                                                                 _(\"reverse_int() only works on integer input, received %s\") #>    line_number is_repeat is_marked_for_translation is_templated #> 1:           7     FALSE                      TRUE        FALSE #> 2:           8     FALSE                      TRUE        FALSE #> 3:          12     FALSE                      TRUE        FALSE #> 4:           2     FALSE                     FALSE        FALSE #> 5:           2     FALSE                     FALSE        FALSE #> 6:           2     FALSE                     FALSE        FALSE #> 7:           9     FALSE                      TRUE         TRUE  # includes untranslated strings provided to the custom #   C/C++ wrapper function ReverseTemplateMessage() get_message_data(   pkg,   custom_translation_functions = list(src = \"ReverseTemplateMessage:2\") ) #> Getting R-level messages... #> Getting src-level messages... #>    message_source     type          file #> 1:              R singular         add.R #> 2:              R singular         add.R #> 3:              R singular      onLoad.R #> 4:              R singular      onLoad.R #> 5:              R singular      onLoad.R #> 6:            src singular reverse_int.c #> 7:            src singular reverse_int.c #>                                                            msgid msgid_plural #> 1: add() only works on all-integer input, but found other types:              #> 2:                                                       integer              #> 3:                                                     Launching              #> 4:                                                             /              #> 5:                                                                            #> 6:        reverse_int() only works on integer input, received %s              #> 7:                        Reversing a vector with %d elements\\\\n              #>                                                                                                                           call #> 1: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 2: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 3:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 4:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 5:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 6:                                                                 _(\"reverse_int() only works on integer input, received %s\") #> 7:                                                         ReverseTemplateMessage(n, \"Reversing a vector with %d elements\\\\n\") #>    line_number is_repeat is_marked_for_translation is_templated #> 1:           7     FALSE                      TRUE        FALSE #> 2:           8     FALSE                      TRUE        FALSE #> 3:           2     FALSE                     FALSE        FALSE #> 4:           2     FALSE                     FALSE        FALSE #> 5:           2     FALSE                     FALSE        FALSE #> 6:           9     FALSE                      TRUE         TRUE #> 7:          19     FALSE                     FALSE         TRUE  # cleanup rm(pkg)"},{"path":"https://michaelchirico.github.io/potools/reference/po_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile .po files to .mo — po_compile","title":"Compile .po files to .mo — po_compile","text":"function compiles plain text .po files translators work binary .mo files installed packages used live translations.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile .po files to .mo — po_compile","text":"","code":"po_compile(dir = \".\", package = NULL, lazy = TRUE, verbose = TRUE)"},{"path":"https://michaelchirico.github.io/potools/reference/po_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile .po files to .mo — po_compile","text":"dir Path package root directory. package Name package. supplied, read DESCRIPTION. lazy TRUE, .mo functions older .po files updated verbose TRUE, print information goes.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new .po file — po_create","title":"Create a new .po file — po_create","text":"po_create() creates new po/{languages}.po containing messages translated. Generally, expect use po_create() create new .po files call existing translation, update changes .pot. See po_update() details.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new .po file — po_create","text":"","code":"po_create(languages, dir = \".\", verbose = !is_testing())"},{"path":"https://michaelchirico.github.io/potools/reference/po_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new .po file — po_create","text":"languages Language identifiers. typically two letters (e.g. \"en\" = English, \"fr\" = French, \"es\" = Spanish, \"zh\" = Chinese), can include additional suffix languages regional variations (e.g. \"fr_CN\" = French Canadian, \"zh_CN\" = simplified characters used mainland China, \"zh_TW\" = traditional characters used Taiwan.) dir Character, default present directory; directory R package stored. verbose Logical, default TRUE (except testing). extra information progress, etc. reported?","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_explain_plurals.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain plural message criteria verbally — po_explain_plurals","title":"Explain plural message criteria verbally — po_explain_plurals","text":"nplural syntax .po file metadata can hard grok, even native speakers. function tries de-mystify providing verbal expressions numbers apply index msgstr array.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_explain_plurals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain plural message criteria verbally — po_explain_plurals","text":"","code":"po_explain_plurals(language, index)"},{"path":"https://michaelchirico.github.io/potools/reference/po_explain_plurals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain plural message criteria verbally — po_explain_plurals","text":"language single locale code. See translate_package() details. index Optional. supplied, 0-based index explain given language. supplied, plurals supplied language described.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract messages for translation into a .pot file — po_extract","title":"Extract messages for translation into a .pot file — po_extract","text":"po_extract() scans package strings translated saves .pot template file (package's po directory). never modify file hand; instead modify underlying source code re-run po_extract(). existing translations, call po_update() po_extract() update changes.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract messages for translation into a .pot file — po_extract","text":"","code":"po_extract(   dir = \".\",   custom_translation_functions = list(),   verbose = !is_testing(),   style = NULL )"},{"path":"https://michaelchirico.github.io/potools/reference/po_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract messages for translation into a .pot file — po_extract","text":"dir Character, default present directory; directory R package stored. custom_translation_functions list either/two components, R src, together governing extract non-standard strings package. See Details translate_package(). verbose Logical, default TRUE (except testing). extra information progress, etc. reported? style Translation style, either \"base\" \"explict\". default, NULL, reads DESCRIPTION field Config/potools/style can specify style package. styles extract strings explicitly flagged translation gettext() ngettext(). base style additionally extracts strings calls stop(), warning(), message(), stopf(), warningf(), messagef() added helpers package. explicit style also accepts tr_() short hand gettext(). See vignette(\"developer\") details.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract messages for translation into a .pot file — po_extract","text":"extracted messages computed get_message_data(), invisibly.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/po_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update all .po files with changes in .pot — po_update","title":"Update all .po files with changes in .pot — po_update","text":"po_update() updates existing .po file .pot file changed. four cases: New messages: added blank msgstr. Deleted messages: marked deprecated moved bottom file. Major changes existing messages: appear addition deletion. Minor changes existing messages: flagged fuzzy. previous message given comments starting #|. Translators need update actual (uncommented) msgstr manually, using old msgid potential reference, delete old translation fuzzy comment (c-format remain, present).","code":"#, fuzzy, c-format #| msgid \"Generating en@quot translations\" msgid \"Updating '%s' %s translation\" msgstr \"memperbarui terjemahan bahasa en@quot...\""},{"path":"https://michaelchirico.github.io/potools/reference/po_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update all .po files with changes in .pot — po_update","text":"","code":"po_update(dir = \".\", lazy = TRUE, verbose = !is_testing())"},{"path":"https://michaelchirico.github.io/potools/reference/po_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update all .po files with changes in .pot — po_update","text":"dir Character, default present directory; directory R package stored. lazy TRUE, .po files older corresponding .pot file updated. verbose Logical, default TRUE (except testing). extra information progress, etc. reported?","code":""},{"path":"https://michaelchirico.github.io/potools/reference/potools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"potools: Tools for Internationalization and Portability in R Packages — potools-package","title":"potools: Tools for Internationalization and Portability in R Packages — potools-package","text":"Translating messages R packages managed using po     top-level directory 'gettext' program. package provides     helper functions building support R packages, e.g.     common validation & /O tasks.","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/potools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"potools: Tools for Internationalization and Portability in R Packages — potools-package","text":"Maintainer: Michael Chirico MichaelChirico4@gmail.com Authors: Hadley Wickham","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively provide translations for a package's messages — translate_package","title":"Interactively provide translations for a package's messages — translate_package","text":"function handles \"grunt work\" building updating translation libraries. addition providing friendly interface supplying translations, internal logic built help make package translation-friendly. get started, package developer run translate_package() package's source produce template .pot file (files, package R C/C++ messages translated), e.g. add translations desired language, include target language: translate_package(languages = \"es\") call.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively provide translations for a package's messages — translate_package","text":"","code":"translate_package(   dir = \".\",   languages,   diagnostics = list(check_cracked_messages, check_untranslated_cat,     check_untranslated_src),   custom_translation_functions = list(R = NULL, src = NULL),   max_translations = Inf,   use_base_rules = package %chin% .potools$base_package_names,   copyright = NULL,   bugs = \"\",   verbose = !is_testing() )"},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactively provide translations for a package's messages — translate_package","text":"dir Character, default present directory; directory R package stored. languages Character vector; locale codes translate. Must valid language accepted gettext. almost always takes form (1) ISO 639 2-letter language code; (2) ll_CC, ll ISO 639 2-letter language code CC ISO 3166 2-letter country code e.g. es Spanish, es_AR Argentinian Spanish, ro Romanian, etc. See base::Sys.getlocale() helpful tips tell locales currently available machine, see References web resources listing locales. diagnostics list diagnostic functions run package's message data. See Details. custom_translation_functions list either/two components, R src, together governing extract non-standard strings package. See Details. max_translations Numeric; used setting cap number translations done language. Defaults Inf, meaning messages package. use_base_rules Logical; internal behavior match base behavior strictly possible? TRUE run base package (.e., base one default packages like utils, graphics, etc.). See Details. copyright Character; passed write_po_file(). bugs Character; passed write_po_file(). verbose Logical, default TRUE (except testing). extra information progress, etc. reported?","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactively provide translations for a package's messages — translate_package","text":"function returns nothing invisibly. side effect, .pot file written package's po directory (updated one yet exist, created scratch otherwise), .pofile written directory element languages.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"phases","dir":"Reference","previous_headings":"","what":"Phases","title":"Interactively provide translations for a package's messages — translate_package","text":"translate_package() goes roughly three \"phases\" translation. Setup -- dir checked existing translations (toggling \"update\" \"new\" modes), R files parsed combed user-facing messages. Diagnostics:  see Diagnostics section . diagnostic detecting \"unhealthy\" messages result yes/prompt exit translation address issues continuing. Translation. messages found phase one iterated -- user shown message English prompted translation target language. process repeated domain languages. attempt made provide hints translations require special care (e.g. escape sequences use templates). templated messages (e.g., use %s), user-provided message must match templates English message. templates order -- R understands template reordering, e.g. %2$s says \"interpret second input string\". See sprintf() details. language completed, corresponding .po file written package's po directory (created yet exist). discrepancies default behavior translate_package translation workflow used generate .po/.pot files R (mainly, suite functions tools, tools::update_pkg_po(), tools::xgettext2pot(), tools::xgettext(), tools::xngettext()). superficial (e.g., whitespace comments), nevertheless may represent barrier smoothly submitting patchings R Core. make process translating base R default packages (tools, utils, stats, etc.) smooth possible, set use_base_rules argument TRUE resulting .po/.pot/.mo file match base's.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"custom-translation-functions","dir":"Reference","previous_headings":"","what":"Custom translation functions","title":"Interactively provide translations for a package's messages — translate_package","text":"base R provides several functions messaging natively equipped translation (domain argument): stop(), warning(), message(), gettext(), gettextf(), ngettext(), packageStartupMessage(). handy, developers may prefer write functions, write wrappers provided functions provide enhanced functionality (e.g., templating automatic wrapping). case, default R tooling translation (xgettext(), xngettext() xgettext2pot(), update_pkg_po() tools) work, translate_package() workhorse get_message_data() provide interface continue building  translations workflow. Suppose wrote function stopf() wrapper stop(gettextf()) used build templated error messages R, makes translation easier translators (see ), e.g.:  Note potools uses just wrapper internally build error messages! extract strings calls package stopf() mark translation, use argument custom_translation_functions:  invocation tells get_message_data() look strings fmt argument calls stopf(). 1 indicates fmt first argument. interface inspired --keyword argument xgettext command-line tool. argument consists list two components, R src (either can excluded), owing differences R C/C++. components, present, consist character vector. R, two types input: one named arguments, unnamed arguments. Entries named arguments look like \"fname:arg|num\" (singular string) \"fname:arg1|num1,arg2|num2\" (plural string). fname gives name function/call extracted R source, arg/arg1/arg2 specify name argument fname strings extracted, num/num1/num2 specify order named argument within signature fname. Entries unnamed arguments look like \"fname:...\\xarg1,...,xargn\", .e., fname, followed :, followed ... (three dots), followed backslash (\\), followed comma-separated list argument names. strings within calls fname except supplied arguments named among xarg1, ..., xargn extracted. clarify, consider (redundantly) specify custom_translation_functions default messagers, gettext, gettextf, ngettext: custom_translation_functions = list(R = c(\"gettext:...\\domain\", \"gettextf:fmt|1\", \"ngettext:msg1|2,msg2|3\")). src, one type input, looks like \"fname:num\", says look num argument calls fname char arrays. Note difference translation works src vs. R -- R, strings passed certain functions considered marked translations, src, translatable strings must explicitly marked . src translations, custom_translation_functions used customize strings marked translation, rather, expand set calls searched potentially untranslated arrays (.e., arrays passed specified calls explicitly marked translation). can reported check_untranslated_src() diagnostic, example.","code":"stopf = function(fmt, ..., domain = NULL) {   stop(gettextf(fmt, ...), domain = domain, call. = FALSE) } get_message_data(   '/path/to/my_package',   custom_translation_functions = list(R = 'stopf:fmt|1') )"},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"cracked-messages","dir":"Reference","previous_headings":"","what":"Cracked messages","title":"Interactively provide translations for a package's messages — translate_package","text":"cracked message one like:  current state, translators asked translate three messages independently: \"\" \"good things \" \"bad things.\" message cracked; might possible translate string generic \"\" many languages -- context key! keep context, error message instead build gettextf like :  Now one string translate! Note also allows translator change word order see fit -- example, Japanese, grammatical order usually puts verb last (English usually comes right subject). translate_package detects cracked messages suggests gettextf-based approach fix .","code":"stop(\"There are \", n, \" good things and \", m, \" bad things.\") stop(domain=NA, gettextf(\"There are %d good things and %d bad things.\"))"},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"untranslated-r-messages-produced-by-cat-","dir":"Reference","previous_headings":"","what":"Untranslated R messages produced by cat()","title":"Interactively provide translations for a package's messages — translate_package","text":"strings passed certain base functions eligible translation, namely stop, warning, message, packageStartupMessage, gettext, gettextf, ngettext (domain argument key translation). However, common also produce user-facing messages using cat -- package , must first use gettext gettextf translate message sending user cat. translate_package detects strings produced cat suggests gettext- gettextf-based fix.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"untranslated-c-c-messages","dir":"Reference","previous_headings":"","what":"Untranslated C/C++ messages","title":"Interactively provide translations for a package's messages — translate_package","text":"diagnostic detects literal char arrays provided common messaging functions C/C++, namely ngettext(), Rprintf(), REprintf(), Rvprintf(), REvprintf(), R_ShowMessage(), R_Suicide(), warning(), Rf_warning(), error(), Rf_error(), dgettext(), snprintf(). actually translate strings, pass translation macro _. NB: Translation C/C++ requires additional #includes declarations, including defining _ macro. See Internationalization section Writing R Extensions details.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"custom-diagnostics","dir":"Reference","previous_headings":"","what":"Custom diagnostics","title":"Interactively provide translations for a package's messages — translate_package","text":"diagnostic function takes input data.table summarizing translatable strings package (e.g. generated get_message_data()), evaluates whether messages \"healthy\" sense, produces digest \"unhealthy\" strings (optionally) suggested replacements. diagnostic function must attribute named diagnostic_tag describes diagnostic ; reproduced format Found {nrow(result)} {diagnostic_tag}:. example, check_untranslated_cat() diagnostic_tag = \"untranslated messaging calls passed cat()\". output diagnostic result following schema: call: character, call identified problematic file: character, file call found line_number: integer, line file call found replacement: character, optional, suggested fix make call \"healthy\" See check_cracked_messages(), check_untranslated_cat(), check_untranslated_src() examples diagnostics.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Interactively provide translations for a package's messages — translate_package","text":"https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Internationalization https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Internationalization https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Internationalization---R-sources https://developer.r-project.org/Translations30.html https://www.isi-web.org/publications/glossary--statistical-terms https://www.gnu.org/software/gettext/ https://www.gnu.org/software/gettext/manual/html_node/Usual-Language-Codes.html#Usual-Language-Codes https://www.gnu.org/software/gettext/manual/html_node/Country-Codes.html#Country-Codes https://www.stats.ox.ac.uk/pub/Rtools/goodies/gettext-tools.zip https://saimana.com/list--country-locale-code/","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interactively provide translations for a package's messages — translate_package","text":"Michael Chirico","code":""},{"path":"https://michaelchirico.github.io/potools/reference/translate_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactively provide translations for a package's messages — translate_package","text":"","code":"pkg <- system.file('pkg', package = 'potools') # copy to a temporary location to be able to read/write/update below tmp_pkg <- file.path(tempdir(), \"pkg\") dir.create(tmp_pkg) file.copy(pkg, dirname(tmp_pkg), recursive = TRUE) #> [1] TRUE  # run translate_package() without any languages # this will generate a .pot template file and en@quot translations (in UTF-8 locales) # we can also pass empty 'diagnostics' to skip the diagnostic step # (skip if gettext isn't available to avoid an error) if (isTRUE(check_potools_sys_reqs)) {   translate_package(tmp_pkg, diagnostics = NULL) }  if (FALSE) { # launches the interactive translation dialog for translations into Estonian: translate_package(tmp_pkg, \"et_EE\", diagnostics = NULL, verbose = TRUE) }  # cleanup unlink(tmp_pkg, recursive = TRUE) rm(pkg, tmp_pkg)"},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a .po or .pot file corresponding to a message database — write_po_file","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"Serialize message database .po .pot formats recognized gettext ecosystem.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"","code":"write_po_file(   message_data,   po_file,   metadata,   width = 79L,   wrap_at_newline = TRUE,   use_base_rules = metadata$package %chin% .potools$base_package_names )  po_metadata(   package = \"\",   version = \"\",   language = \"\",   author = \"\",   email = \"\",   bugs = \"\",   copyright = NULL,   ... )  # S3 method for po_metadata format(x, template = FALSE, use_plurals = FALSE, ...)  # S3 method for po_metadata print(x, ...)"},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"message_data data.table, returned get_message_data(). NB: R creates separate domains R C/C++ code; recommended filtering get_message_data output message_source == \"R\" message_source == \"src\". approaches untested. po_file Character vector giving destination path. Paths ending .pot written template files (e.g., msgstr entries blanked). metadata po_metadata object returned po_metadata(). width Numeric governing wrapping width output file. Default 79L match behavior xgettext utility. Inf turns wrapping (except file source markers comments). wrap_at_newline Logical, default TRUE match xgettext utility's behavior. TRUE, msgid msgstr always wrapped internal newline (.e., literally matching \\n). use_base_rules Logical; internal behavior match base behavior strictly possible? TRUE run base package (.e., base one default packages like utils, graphics, etc.). See Details. package Character; name package translated. version Character; version package translated. language Character; language msgstr. See translate_package() details. author Character; author (combined email) attribute translations (Last-Translator). email Character; e-mail address associated author. bugs Character; URL issues translations can reported. copyright object used construct initial Copyright reference output. NULL, comment written. list, following structure: year: Required, year hyphen-separated range years holder: Required, name copyright holder title: Optional, title .po additional: Optional, character vector additional lines copyright comment section character scalar, interpreted holder year set POT-Creation-Date's year. ... Additional (named) components add metadata. print.po_metadata, passed format.po_metadata x po_metadata object. template Logical; format metadata .pot template? use_plurals Logical; Plural-Forms entry included?","code":""},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"po_metadata, object class po_metadata format method used serialize metadata.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"Three components set automatically provided: pot_timestamp - POSIXct used write POT-Creation-Date entry. Defaults Sys.time() run time. po_timestamp - POSIXct used write PO-Revision-Date entry. Defaults pot_timestamp. language_team - string used write Language-Team entry. Defaults language; provided manually, format LANGUAGE <LL@li.org> recommended. charset output always set \"UTF-8\"; intentional make cumbersome create non-UTF-8 files.","code":""},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"https://www.gnu.org/software/gettext/manual/html_node/Header-Entry.html","code":""},{"path":[]},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"Michael Chirico","code":""},{"path":"https://michaelchirico.github.io/potools/reference/write_po_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a .po or .pot file corresponding to a message database — write_po_file","text":"","code":"message_data <- get_message_data(system.file('pkg', package='potools')) #> Getting R-level messages... #> Getting src-level messages... desc_data <- read.dcf(system.file('pkg', 'DESCRIPTION', package='potools'), c('Package', 'Version')) metadata <- po_metadata(   package = desc_data[, \"Package\"], version = desc_data[, \"Version\"],   language = 'ar_SY', author = 'R User', email = 'ruser@gmail.com',   bugs = 'https://github.com/ruser/potoolsExample/issues' )  # add fake translations message_data[type == \"singular\", msgstr := \"<arabic translation>\"] #>    message_source     type          file #> 1:              R singular         add.R #> 2:              R singular         add.R #> 3:              R singular      onLoad.R #> 4:              R singular      onLoad.R #> 5:              R singular      onLoad.R #> 6:            src singular reverse_int.c #>                                                            msgid msgid_plural #> 1: add() only works on all-integer input, but found other types:              #> 2:                                                       integer              #> 3:                                                     Launching              #> 4:                                                             /              #> 5:                                                                            #> 6:        reverse_int() only works on integer input, received %s              #>                                                                                                                           call #> 1: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 2: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 3:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 4:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 5:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 6:                                                                 _(\"reverse_int() only works on integer input, received %s\") #>    line_number is_repeat is_marked_for_translation is_templated #> 1:           7     FALSE                      TRUE        FALSE #> 2:           8     FALSE                      TRUE        FALSE #> 3:           2     FALSE                     FALSE        FALSE #> 4:           2     FALSE                     FALSE        FALSE #> 5:           2     FALSE                     FALSE        FALSE #> 6:           9     FALSE                      TRUE         TRUE #>                  msgstr #> 1: <arabic translation> #> 2: <arabic translation> #> 3: <arabic translation> #> 4: <arabic translation> #> 5: <arabic translation> #> 6: <arabic translation> # Arabic has 6 plural forms message_data[type == \"plural\", msgstr_plural := .(as.list(sprintf(\"<%d translation>\", 0:5)))] #>    message_source     type          file #> 1:              R singular         add.R #> 2:              R singular         add.R #> 3:              R singular      onLoad.R #> 4:              R singular      onLoad.R #> 5:              R singular      onLoad.R #> 6:            src singular reverse_int.c #>                                                            msgid msgid_plural #> 1: add() only works on all-integer input, but found other types:              #> 2:                                                       integer              #> 3:                                                     Launching              #> 4:                                                             /              #> 5:                                                                            #> 6:        reverse_int() only works on integer input, received %s              #>                                                                                                                           call #> 1: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 2: stop( \"add() only works on all-integer input, but found other types: \", toString(unique(setdiff(input_types, \"integer\"))) ) #> 3:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 4:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 5:                                                              cat(\"Launching\", format(libname), \"/\", format(pkgname), \"\\\\n\") #> 6:                                                                 _(\"reverse_int() only works on integer input, received %s\") #>    line_number is_repeat is_marked_for_translation is_templated #> 1:           7     FALSE                      TRUE        FALSE #> 2:           8     FALSE                      TRUE        FALSE #> 3:           2     FALSE                     FALSE        FALSE #> 4:           2     FALSE                     FALSE        FALSE #> 5:           2     FALSE                     FALSE        FALSE #> 6:           9     FALSE                      TRUE         TRUE #>                  msgstr msgstr_plural #> 1: <arabic translation>               #> 2: <arabic translation>               #> 3: <arabic translation>               #> 4: <arabic translation>               #> 5: <arabic translation>               #> 6: <arabic translation>                # Preview metadata print(metadata) #> msgid \"\" #> msgstr \"\" #> \"Project-Id-Version: potoolsExample 0.0.1\\n\" #> \"Report-Msgid-Bugs-To: https://github.com/ruser/potoolsExample/issues\\n\" #> \"POT-Creation-Date: 2022-01-10 01:30+0000\\n\" #> \"PO-Revision-Date: 2022-01-10 01:30+0000\\n\" #> \"Last-Translator: R User <ruser@gmail.com>\\n\" #> \"Language-Team: ar_SY\\n\" #> \"Language: ar_SY\\n\" #> \"MIME-Version: 1.0\\n\" #> \"Content-Type: text/plain; charset=UTF-8\\n\" #> \"Content-Transfer-Encoding: 8bit\\n\" # write .po file write_po_file(   message_data[message_source == \"R\"],   tmp_po <- tempfile(fileext = '.po'),   metadata ) #> NULL writeLines(readLines(tmp_po)) #> msgid \"\" #> msgstr \"\" #> \"Project-Id-Version: potoolsExample 0.0.1\\n\" #> \"Report-Msgid-Bugs-To: https://github.com/ruser/potoolsExample/issues\\n\" #> \"POT-Creation-Date: 2022-01-10 01:30+0000\\n\" #> \"PO-Revision-Date: 2022-01-10 01:30+0000\\n\" #> \"Last-Translator: R User <ruser@gmail.com>\\n\" #> \"Language-Team: ar_SY\\n\" #> \"Language: ar_SY\\n\" #> \"MIME-Version: 1.0\\n\" #> \"Content-Type: text/plain; charset=UTF-8\\n\" #> \"Content-Transfer-Encoding: 8bit\\n\" #>  #> #: add.R:7 #> msgid \"add() only works on all-integer input, but found other types:\" #> msgstr \"<arabic translation>\" #>  #> #: add.R:8 #> msgid \"integer\" #> msgstr \"<arabic translation>\"  # write .pot template write_po_file(   message_data[message_source == \"R\"],   tmp_pot <- tempfile(fileext = '.pot'),   metadata ) #> NULL writeLines(readLines(tmp_pot)) #> msgid \"\" #> msgstr \"\" #> \"Project-Id-Version: potoolsExample 0.0.1\\n\" #> \"Report-Msgid-Bugs-To: https://github.com/ruser/potoolsExample/issues\\n\" #> \"POT-Creation-Date: 2022-01-10 01:30+0000\\n\" #> \"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\" #> \"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\" #> \"Language-Team: LANGUAGE <LL@li.org>\\n\" #> \"Language: \\n\" #> \"MIME-Version: 1.0\\n\" #> \"Content-Type: text/plain; charset=CHARSET\\n\" #> \"Content-Transfer-Encoding: 8bit\\n\" #>  #> #: add.R:7 #> msgid \"add() only works on all-integer input, but found other types:\" #> msgstr \"\" #>  #> #: add.R:8 #> msgid \"integer\" #> msgstr \"\"  # cleanup file.remove(tmp_po, tmp_pot) #> [1] TRUE TRUE rm(message_data, desc_data, metadata, tmp_po, tmp_pot)"},{"path":"https://michaelchirico.github.io/potools/news/index.html","id":"potools-023-in-development","dir":"Changelog","previous_headings":"","what":"potools 0.2.3 (in development)","title":"potools 0.2.3 (in development)","text":"po_extract() extracts messages package source code create template .pot files (@hadley, #243). po_create() creates skeletal .po files given language .pot template (@hadley, #235) po_compile() converts .po translation files binary .mo files used installation (@hadley, #234). po_update() incorporates merges source message changes existing .po files (@hadley, #235) [Note] potools now site built pkgdown hosted GitHub pages: https://michaelchirico.github.io/potools/. Thanks @hadley initial implementation. [Documentation] Two new vignettes, “Translation package developers” “Translation package translators” explain detail process translation two perspectives – package developer message translator. [Bugfix] translate_package() works batch mode, #224. Thanks @HenrikBengtsson report. potools new hex logo! Thanks @hadley coordinating @allisonhorst drawing! [Bugfix] check_cracked_messages() recognizes named arguments (e.g. call. stop() appendLF message()) keeps original call, #227. Thanks @hadley report. [Note] test suite now relies 3rd edition testthat, meaning version requirement Suggested dependency. [Note] default value verbose changed TRUE translate_package() get_message_data(). Verbosity also increased help detect source issues, #288. Thanks @LDalby reporting unhelpful error. [Note] package now contains Japanese translations potools serve example. See po/R-ja.po. #241; thanks @HenrikBengtsson suggestion. [Feature] check_potools_sys_reqs() (mostly intended internal use, exported testing) gains argument fine-tune system requirements check, #275 #288. Thanks @hadley suggestion @LDalby early dev testing emphasized need . [Note] potools gains logo featuring potoo thanks artistic skills @allisonhorst [Feature] New function po_explain_plurals() help de-mystify supply plurals different languages. example, po_explain_plurals(\"pl\", 3) explains “Polish (Polski), plural index 2 applies n = 0, 5-21, 25-31, 35-41, …”, #278. Thanks @hadley suggestion independently export functionality already used part translate_package().","code":""},{"path":"https://michaelchirico.github.io/potools/news/index.html","id":"new-languageslocales-supported-out-of-the-box-0-2-3","dir":"Changelog","previous_headings":"","what":"New languages/locales supported out of the box:","title":"potools 0.2.3 (in development)","text":"Swedish (svenska)","code":""},{"path":"https://michaelchirico.github.io/potools/news/index.html","id":"potools-022-july-2021","dir":"Changelog","previous_headings":"","what":"potools 0.2.2 (July 2021)","title":"potools 0.2.2 (July 2021)","text":"CRAN release: 2021-07-12 Skip tests machines gettext unavailable, #187; also alter msgfmt command executed create .mo files skip options unavailable Solaris, #218 Faster parsing src messages (e.g. get_message_data() base package reduced 14 7 seconds), #119 [New feature] New argument max_translations translate_package() limit number translations done, #188 adding metadata new language, added tolerance whitespace differences specifying plurals, #183 [New feature] get_message_data() skips messages lines comments # notranslate, regions lines matched pairs comments # notranslate start # notranslate end, #10. useful small fragmentary strings untranslateable/worth translating, strings technically untranslateable (e.g., contain \\r). [New function] write_po_file() convert message database .po .pot file manually (previously handled internally translate_package()), #203. Also constructor associated po_metadata class, po_metadata(). See ?po_metadata. [Bugfix] get_message_data() better job files unmatched parentheses inside preprocessor macros (#defines) C/C++ files, #199","code":""},{"path":"https://michaelchirico.github.io/potools/news/index.html","id":"potools-020-june-2021","dir":"Changelog","previous_headings":"","what":"potools 0.2.0 (June 2021)","title":"potools 0.2.0 (June 2021)","text":"CRAN release: 2021-06-30 Landed CRAN!","code":""}]
